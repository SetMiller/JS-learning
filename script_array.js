console.clear();
const ARRAYS = 'тема изучения - Массивы'
console.log(`${ARRAYS}`);
console.log(`-----------------------------------------------------`);

// 📣 Массив - это упорядоченная коллекия значений👆.
// 📣 Значения в массиве называются элементами👆, и каждый элемент характерихуется числовой позицией в массиве,
// которая называется индексом👆.
// 📣 Все массивы в JavaScript имеют свойство: length🔥🔥🔥.

//1.Создание массива
//1.1 С помощью литерала:
  let empty = [];                             //👈Пустой массив, length: 0 (__proto__: Array(0))🔥
      console.log(`Вызов массива empty:`);
      console.table(empty);

  let primes = [2, 3, 5, 6, 11];               //👈Массив с пятью числовыми элементами, length: 5🔥
      console.log(`Вызов массива primes:`);
      console.table(primes);

  let misc = [ 1.1, true, "a", ];              //👈Три элемента разных типов + заверш. запятая, length: 3🔥
      console.log(`Вызов массива misc:`);
      console.table(misc);

// 📣 Значения в литерале массива не обязательно должны быть константами - это могут быть любые выражения🔥🔥🔥

  let base = 1024;
  let holo = "1024";
  let table = [base, base+1, base*2, base.toString(), Number(holo),];   //👈Любые выражения с приведением типов, length: 5🔥
      console.log(`Вызов массива table:`);
      console.table(table);

// 📣 Литералы массивов могут модержать литералы объектов или литералы других массивов🔥🔥🔥

  let b = [[1, {x:1, y:2}], [2, {x:3, y:4}]];         //👈Массив содержит 2 под-массива, которые содержат свойства со значениями и объектами🔥
      console.log(`Вызов массива b:`);
      console.table(b);
      console.log('\n');

// 📣 Если литерал массива содержит несколько идущих подряд запятых без значений между ними, моздается разреженный массив
// 📣 Элементы отсутствуют в массива, но при обращении к ним возвращяется значение undefined🔥🔥🔥

  let count = [1,,3];                                 //👈Элементы с индексами 0 и 2, count[1] -> undefined🔥 length: 3👆
  let undefs = [,,];                                  //👈Массив без элементов, но length: 2👆
      console.log(`Вызов массива count:`);
      console.log([count]);
      console.log('\n');
      console.log(`Вызов массива undefs:`);
      console.log([undefs]);
console.clear()

//1.2 С помощью конструктора Array():

// 📣 Вызвать конструктор без аргументов

  let a = new Array();                                          //👈Пустой массив (без аргументов), length: 0👆
      console.log(a);

  let a2 = new Array(10);                                       //👈Пустой массив (без аргументов), length: 10👆
      console.log(a2);

  let a3 = new Array(10);                                       //👈Массив с одним аргументом, length: 10👆
  a3[0] = 10;
      console.log(a3);

  let a4 = new Array(5, 4, 3, 2, 1, "testing, testing");        //👈Массив с шестью аргументами, length: 6👆
      console.table(a4);
console.clear()

//2.Чтение и запись элементов массива

  let c = ["world"];                        //👈Создать массив с одним элементом
  let value = c[0];                         //👈Прочитать элемент 0
  c[1] = 3.14;                              //👈Записать значение в элемент 1
  let i = 2;                                
  c[i] = 3;                                 //👈Записать значение в элемент i = 2
  c[i+1] = 'hello';                         //👈Записать значение в элемент i+1 = 3
  c[c[i]] = c[0];                           //👈Прочитать значение элемента 0 в элемент c[i], i=2 -> c[2]=3
      console.table(c);
console.clear()
// 📣 Когда имя свойства не является неотрицательным целым числом, оно интерпретируется как имя обычного свойства
// 📣 объекта, а не как индекс массива

  c[-1.23] = true;                          //👈Будет создано свойство с именем "-1.23"
  c["1000"] = 5;                            //👈1001-й элемент массива
  c[4.0];                                   //👈Будет создан пустой элемент массива с индексом 4, тоже что и c[4], c["4"]👆
      console.table(c);
console.clear()

//3.Разреженные массивы

  let d = new Array(5);                     //👈Создать пустой массив со значением length = 5
  d[2] = 3;
  delete d[2];
  d = [];                                   //👈Пересоздать пустой массив со значением length = 0
  d[100] = 0;                               //👈Добавит один элемент, но установит length = 101;

// 📣 Существенно разреженные массивы обычно более медленны и потребляют больше памяти, чем плотные массивы,
// 📣 а поиск элементов в таких массивах занимает примерно столько же времени, что и поиск обычных свойств объектов

  let d1 = [,];                             //👈Пересоздать пустой массив со значением length = 0
  let d2 = [undefined];                     //👈Пересоздать пустой массив со значением length = 1
  console.log(0 in d1);                     //👈 => false, d1 не имеет элемента с индексом 0👆
  console.log(0 in d2);                     //👈 => true, d2 имеет элемент с индексом 0 и со значением undefined👆





