'use strict'

// ะะฝะบะฐะฟััะปััะธั - ััะพ ัะฒะพะนััะฒะพ ัะธััะตะผั, ะฟะพะทะฒะพะปัััะตะต ะพะฑัะตะดะธะฝะธัั ะดะฐะฝะฝัะต ะธ ะผะตัะพะดั, 
// ัะฐะฑะพัะฐััะธะต ั ะฝะธะผะธ, ะฒ ะบะปะฐััะต ะธ ัะบัััั ะดะตัะฐะปะธ ัะตะฐะปะธะทะฐัะธะธ ะพั ะฟะพะปัะทะพะฒะฐัะตะปั.

  // ะัะธะผะตั โ1 -> ๐ฅ๐ฅ๐ฅ๐ฅ
    // ะฟัะพัะตะดััะฝะพะต ะฟัะตะดััะฐะฒะปะตะฝะธะต
      let baseSalary = 30000;
      let overtime = 10;
      let rate = 20

      function getWage (a, b, c){
        return a + (b * c)
      }

    // ะะะ ะฟัะตะดััะฐะฒะปะตะฝะธะต
      let employee = {
        baseSalary: 30000,
        overtime: 10,
        rate: 20,
        getWage(){
          return this.baseSalary + (this.overtime * this.rate)
        }
      }
    
      console.log(getWage(baseSalary, overtime, rate))      // -> ะบะพะณะดะฐ ะฒัะทัะฒะฐะตะผ ััะฝะบัะธั, ะตะน ะฟัะธัะพะดะธััั ัะฒะฝะพ ะฟะตัะตะดะฐะฒะฐัั ะฐัะณัะผะตะฝัั
      console.log(employee)
      console.log(employee.getWage())                       // -> ะบะพะณะดะฐ ะฒัะทัะฒะฐะตะผ ะผะตัะพะด ะพะฑัะตะบัะฐ, ะพะฝ ัะถะต ัััะปะฐะตััั ะฝะฐ ัะฒะพะนััะฒะฐ ะดะฐะฝะฝะพะณะพ ะพะฑัะตะบัะฐ

  // ะัะธะผะตั โ2 -> ๐ฅ๐ฅ๐ฅ๐ฅ
      function Employee(obj){
        this.baseSalary = obj.baseSalary
        this.overtime = obj.overtime
        this.rate = obj.rate
      }

      Employee.prototype.getWage = function(){
        return this.baseSalary + (this.overtime * this.rate)
      }

      const John = new Employee({baseSalary:20000, overtime:5, rate:20})
      console.log(John)
      console.log(John.getWage())

  // ะัะธะผะตั โ3 ES6 -> ๐ฅ๐ฅ๐ฅ๐ฅ
      class Employee2 {
        constructor(obj){
          console.log(this.constructor.name)
          // if (this.constructor.name === 'Employee2'){
          //   throw new Error(`${this.constructor.name}: can not create instance of abstract class `)
          // }
          this.baseSalary = obj.baseSalary
          this.overtime = obj.overtime
          this.rate = obj.rate
        }
        getWage(){
          return this.baseSalary + (this.overtime * this.rate)
        }
      }
        
      const Sam = new Employee2({baseSalary:30000, overtime:10, rate:20})
      console.log(Sam)
      console.log(Sam.getWage())

// ะัะฝะพะฒะฝะพะน ะฟัะธะทะฝะฐะบ ะฟัะพัะตะดััะฝะพะณะพ ะบะพะดะฐ -> ะพัะดะตะปัะฝัะต ะดะฐะฝะฝัะต ะธ ััะฝะบัะธะธ ั ะฟะฐัะฐะผะตััะฐะผะธ

// *********************** โ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธโ๏ธ *********************** //